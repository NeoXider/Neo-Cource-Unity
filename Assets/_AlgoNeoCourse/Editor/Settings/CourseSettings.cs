using UnityEngine;
using UnityEditor;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
#if ODIN_INSPECTOR
using Sirenix.OdinInspector;
#endif

namespace NeoCource.Editor.Settings
{
[UnityEditor.FilePath(CourseSettings.AssetPath, UnityEditor.FilePathAttribute.Location.ProjectFolder)]
public class CourseSettings : ScriptableSingleton<CourseSettings>
{
    public const string AssetPath = "ProjectSettings/AlgoNeoCourseSettings.asset";
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ValidationSettings ‚Äî –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public static void EnsureAssetExists() { /* no-op */ }
#if ODIN_INSPECTOR
    [Title("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
#endif
    [Tooltip("Raw-—Å—Å—ã–ª–∫–∞ –Ω–∞ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–ª–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —É—Ä–æ–∫–∞–º–∏.")]
    public string repositoryBaseUrl = "https://raw.githubusercontent.com/NeoXider/AlgoNeoCource/main";

    [Tooltip("–ò–º—è JSON-—Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞.")]
    public string courseJsonFile = "course.json";

#if ODIN_INSPECTOR
    [Title("–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞")]
#endif
    [Tooltip("–ó–∞–≥—Ä—É–∂–∞—Ç—å –∫—É—Ä—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞?")]
    public bool autoLoadOnStart = true;

    [Tooltip("–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å Unity.")]
    public bool enableDebugLogging = false;

    [Tooltip("–†–µ–∂–∏–º —Ç–µ—Å—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å GitHub.")]
    public bool testMode = false;
#if ODIN_INSPECTOR
    [Title("UI")]
#endif
    [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —É—Ä–æ–∫–∞ –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ –æ–∫–Ω–∞ –∫—É—Ä—Å–∞.")]
    public int maxLessonTitleLength = 20;

    private static readonly System.Net.Http.HttpClient s_HttpClient = CreateHttpClient();
    private static System.Net.Http.HttpClient CreateHttpClient()
    {
        var client = new System.Net.Http.HttpClient();
        try
        {
            client.Timeout = TimeSpan.FromSeconds(20);
            client.DefaultRequestHeaders.UserAgent.TryParseAdd("AlgoNeoCourseEditor/1.0");
        }
        catch { }
        return client;
    }

    private System.Threading.CancellationTokenSource currentDownloadCts;


#if ODIN_INSPECTOR
    [Title("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫")]
#endif
    [Tooltip("–¶–≤–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π OK (–∫–æ–Ω—Å–æ–ª—å)")]
    public Color okLogColor = new Color(0.2f, 0.85f, 0.2f);
    [Tooltip("–¶–≤–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π FAIL (–∫–æ–Ω—Å–æ–ª—å)")]
    public Color failLogColor = new Color(1.0f, 0.6f, 0.2f);

#if ODIN_INSPECTOR
    [Title("GIF ‚Üí MP4 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (–¥–ª—è Markdown)")]
#endif
    [Tooltip("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .gif –≤ .mp4 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")] public bool autoConvertGifToMp4 = true;
    [Tooltip("–ü—É—Ç—å –∫ ffmpeg.exe (–µ—Å–ª–∏ –ø—É—Å—Ç–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)")] public string ffmpegPath = "Assets/_AlgoNeoCourse/Editor/Utils/ffmpeg.exe";
    [Tooltip("–ü–∞–ø–∫–∞ –∫—ç—à–∞ mp4 (–≤ –ø—Ä–æ–µ–∫—Ç–µ)")] public string gifVideoCacheFolder = "Assets/_AlgoNeoCourse/.VideoCache";

#if ODIN_INSPECTOR
    [Title("–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"), ShowIf("testMode")]
#endif
    [Tooltip("–ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É course.json (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞).")]
    public string localCourseJsonPath;

#if ODIN_INSPECTOR
    [Title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–±–æ—Ä —É—Ä–æ–∫–æ–≤")]
#endif
    [Tooltip("–ü–∞–ø–∫–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞).")]
    public string downloadFolderRelative = "Assets/_AlgoNeoCourse/Downloaded";
    [Tooltip("–ü–∞–ø–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∞—Ç .md —É—Ä–æ–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –≤ course.json –Ω–µ –∑–∞–¥–∞–Ω –ø—É—Ç—å).")]
    public string lessonsFolderInRepo = "lessons";

    [Serializable]
    public class LessonInfo
    {
        public string id;
        public string title;
        public string path; // –ø—É—Ç—å –∫ .md –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫ –∫–æ—Ä–Ω—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        public string md;   // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        public string file; // –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–∏–∑ course.json)
    }

    [Serializable]
    public class CourseDescriptor
    {
        public LessonInfo[] lessons;
    }

    [Serializable]
    public class LessonSelection
    {
        public bool selected;
        public string id;
        public string title;
        public string file; // –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    }
    
#if ODIN_INSPECTOR
    [PropertySpace]
    [PropertyOrder(10)]
    [HorizontalGroup("top"), GUIColor(0.6f, 0.75f, 0.95f)]
    [Button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É", ButtonSizes.Small)]
#endif
    public void CheckCourseLink()
    {
        string url = repositoryBaseUrl.TrimEnd('/') + "/" + courseJsonFile;
        _ = CheckJsonExistsAsync(url);
    }

#if ODIN_INSPECTOR
    [PropertyOrder(30)]
    [TableList, Title("Lessons selections")]
#endif
    public List<LessonSelection> lessonSelections = new List<LessonSelection>();

#if ODIN_INSPECTOR
    [HorizontalGroup("select"), GUIColor(0.4f, 0.85f, 0.55f)]
    [Button("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", ButtonSizes.Medium)]
#endif
    public void SelectAllLessons()
    {
        for (int i = 0; i < lessonSelections.Count; i++) lessonSelections[i].selected = true;
        SaveIfPossible();
        RepaintProjectWindow();
    }

#if ODIN_INSPECTOR
    [HorizontalGroup("select"), GUIColor(0.8f, 0.8f, 0.8f)]
    [Button("‚ùé –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", ButtonSizes.Medium)]
#endif
    public void DeselectAllLessons()
    {
        for (int i = 0; i < lessonSelections.Count; i++) lessonSelections[i].selected = false;
        SaveIfPossible();
        RepaintProjectWindow();
    }

    private async Task CheckJsonExistsAsync(string url)
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {
                if (enableDebugLogging)
                    Debug.Log($"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏: {url}");

                var response = await client.GetAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    string json = await response.Content.ReadAsStringAsync();
                    if (!string.IsNullOrWhiteSpace(json))
                    {
                        Debug.Log($"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω: {url}");
                    }
                    else
                    {
                        Debug.LogError($"‚ö† –§–∞–π–ª –ø—É—Å—Ç–æ–π: {url}");
                    }
                }
                else
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.StatusCode} ‚Äî {url}");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            }
        }
    }

#if ODIN_INSPECTOR
    [PropertyOrder(20)]
    [HorizontalGroup("actions"), GUIColor(0.45f, 0.8f, 0.95f)]
    [Button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤", ButtonSizes.Large)]
#endif
    public void LoadLessonsList()
    {
        _ = LoadLessonsListAsync();
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –≤ Odin: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Odin –ø–æ–∫–∞–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∫—Ä—ã—Ç–æ–π
    }

    private async Task LoadLessonsListAsync()
    {
        try
        {
            EditorUtility.DisplayProgressBar("AlgoNeoCourse", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤...", 0.1f);
            string jsonText = await LoadCourseJsonAsync();
            if (string.IsNullOrWhiteSpace(jsonText))
            {
                Debug.LogError("CourseSettings: –ø—É—Å—Ç–æ–π course.json");
                return;
            }

            var descriptor = JsonUtility.FromJson<CourseDescriptor>(jsonText);
            if (descriptor == null || descriptor.lessons == null || descriptor.lessons.Length == 0)
            {
                Debug.LogError("CourseSettings: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ (–ø–æ–ª–µ lessons)");
                return;
            }

            lessonSelections = descriptor.lessons.Select((l, idx) =>
            {
                string id = string.IsNullOrEmpty(l.id) ? (idx + 1).ToString() : l.id;
                string title = string.IsNullOrEmpty(l.title) ? ("Lesson " + (idx + 1)) : l.title;
                // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: file -> path -> md -> slug
                string fileOrPath = !string.IsNullOrEmpty(l.file) ? l.file : (!string.IsNullOrEmpty(l.path) ? l.path : l.md);

                if (string.IsNullOrWhiteSpace(fileOrPath))
                {
                    string slug = Slugify(title);
                    string baseFolder = string.IsNullOrWhiteSpace(lessonsFolderInRepo) ? string.Empty : lessonsFolderInRepo.Trim('/');
                    fileOrPath = string.IsNullOrEmpty(baseFolder) ? ($"{slug}.md") : ($"{baseFolder}/{slug}.md");
                    if (enableDebugLogging)
                        Debug.Log($"CourseSettings: –¥–ª—è —É—Ä–æ–∫–∞ '{title}' –Ω–µ –∑–∞–¥–∞–Ω –ø—É—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '{fileOrPath}'");
                }

                return new LessonSelection
                {
                    selected = true,
                    id = id,
                    title = title,
                    file = fileOrPath
                };
            }).ToList();

            SaveIfPossible();
            RepaintProjectWindow();
            Debug.Log($"CourseSettings: –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Ä–æ–∫–æ–≤ ‚Äî {lessonSelections.Count}");
        }
        catch (Exception ex)
        {
            Debug.LogError("CourseSettings: LoadLessonsListAsync error ‚Äî " + ex.Message);
        }
        finally
        {
            EditorUtility.ClearProgressBar();
        }
    }

    private async Task<string> LoadCourseJsonAsync()
    {
        if (testMode && !string.IsNullOrEmpty(localCourseJsonPath))
        {
            return File.Exists(localCourseJsonPath) ? await Task.Run(() => File.ReadAllText(localCourseJsonPath)) : null;
        }

        string url = repositoryBaseUrl.TrimEnd('/') + "/" + courseJsonFile.TrimStart('/');
        const int maxAttempts = 3;
        int attempt = 0;
        while (true)
        {
            attempt++;
            try
            {
                var response = await s_HttpClient.GetAsync(url);
                if (!response.IsSuccessStatusCode)
                {
                    Debug.LogError($"CourseSettings: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å course.json ‚Äî {response.StatusCode} {url}");
                    return null;
                }
                return await response.Content.ReadAsStringAsync();
            }
            catch (Exception ex)
            {
                if (attempt >= maxAttempts)
                {
                    Debug.LogError("CourseSettings: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ course.json ‚Äî " + ex.Message);
                    return null;
                }
                await Task.Delay(TimeSpan.FromMilliseconds(300 * Math.Pow(2, attempt - 1)));
            }
        }
    }

#if ODIN_INSPECTOR
    [PropertySpace]
    [PropertyOrder(20)]
    [HorizontalGroup("actions")]
    [GUIColor(0.25f, 0.85f, 0.35f)]
    [Button("–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", ButtonSizes.Large)]
#endif
    public void DownloadSelectedLessons()
    {
        CancelDownloads();
        currentDownloadCts = new System.Threading.CancellationTokenSource();
        _ = DownloadSelectedLessonsAsync(currentDownloadCts.Token);
    }

    private async Task DownloadSelectedLessonsAsync(System.Threading.CancellationToken ct)
    {
        if (lessonSelections == null || lessonSelections.Count == 0)
        {
            Debug.LogWarning("CourseSettings: —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤'.");
            return;
        }

        string targetFolder = downloadFolderRelative.Replace("\\", "/");
        if (!Directory.Exists(targetFolder)) Directory.CreateDirectory(targetFolder);

        var client = s_HttpClient;

        try
        {
            int total = lessonSelections.Count(ls => ls.selected);
            int done = 0;
            foreach (var ls in lessonSelections.Where(s => s.selected))
            {
                if (ct.IsCancellationRequested) break;
                string remoteRel = ls.file?.TrimStart('/');
                if (string.IsNullOrEmpty(remoteRel))
                {
                    Debug.LogWarning($"CourseSettings: —É —É—Ä–æ–∫–∞ '{ls.title}' –Ω–µ –∑–∞–¥–∞–Ω –ø—É—Ç—å –∫ .md");
                    continue;
                }

                string url = repositoryBaseUrl.TrimEnd('/') + "/" + remoteRel;
                string localPath = Path.Combine(targetFolder, SanitizeFileName(ls.id + "-" + Path.GetFileName(remoteRel)));

                EditorUtility.DisplayProgressBar("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤", $"{ls.title}", done / (float)Math.Max(total,1));

                const int maxAttempts = 3;
                int attempt = 0;
                while (true)
                {
                    if (ct.IsCancellationRequested) break;
                    attempt++;
                    try
                    {
                        var response = await client.GetAsync(url, ct);
                        if (!response.IsSuccessStatusCode)
                        {
                            Debug.LogError($"CourseSettings: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {ls.title} ‚Äî {response.StatusCode} {url}");
                        }
                        else
                        {
                            string md = await response.Content.ReadAsStringAsync();
                            File.WriteAllText(localPath, md);
                            Debug.Log($"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {localPath}");
                        }
                        break;
                    }
                    catch (OperationCanceledException)
                    {
                        break;
                    }
                    catch (Exception ex)
                    {
                        if (attempt >= maxAttempts)
                        {
                            Debug.LogError("CourseSettings: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞ ‚Äî " + ex.Message);
                            break;
                        }
                        await Task.Delay(TimeSpan.FromMilliseconds(300 * Math.Pow(2, attempt - 1)), ct);
                    }
                }

                done++;
            }
        }
        catch (Exception ex)
        {
            Debug.LogError("CourseSettings: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤ ‚Äî " + ex.Message);
        }
        finally
        {
            EditorUtility.ClearProgressBar();
            AssetDatabase.Refresh();
            CancelDownloads();
        }
    }

    public void CancelDownloads()
    {
        try { currentDownloadCts?.Cancel(); }
        catch { }
        finally { currentDownloadCts = null; }
    }

#if ODIN_INSPECTOR
    [PropertyOrder(20)]
    [HorizontalGroup("actions")]
    [GUIColor(0.98f, 0.75f, 0.25f)]
    [Button("–û—Ç–º–µ–Ω–∏—Ç—å", ButtonSizes.Medium)]
#endif
    public void CancelDownloadsButton()
    {
        CancelDownloads();
    }

    private static string SanitizeFileName(string fileName)
    {
        var invalid = Path.GetInvalidFileNameChars();
        return string.Concat(fileName.Select(ch => invalid.Contains(ch) ? '_' : ch));
    }

    private static string Slugify(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return "lesson";
        string lower = input.Trim().ToLowerInvariant();
        // –∑–∞–º–µ–Ω–∏–º –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã –Ω–∞ '-'
        lower = Regex.Replace(lower, @"[\t\s_]+", "-");
        // —É–±–µ—Ä—ë–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏ –¥–µ—Ñ–∏—Å—ã
        lower = Regex.Replace(lower, @"[^a-z0-9-]", "");
        lower = Regex.Replace(lower, "-+", "-");
        lower = lower.Trim('-');
        if (string.IsNullOrEmpty(lower)) lower = "lesson";
        return lower;
    }

#if ODIN_INSPECTOR
    [PropertyOrder(20)]
    [HorizontalGroup("actions")]
    [GUIColor(1.0f, 0.35f, 0.35f)]
    [Button("–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏", ButtonSizes.Medium)]
#endif
    public void DeleteDownloadedFiles()
    {
        string targetFolder = downloadFolderRelative.Replace("\\", "/");
        if (Directory.Exists(targetFolder))
        {
            try
            {
                FileUtil.DeleteFileOrDirectory(targetFolder);
                FileUtil.DeleteFileOrDirectory(targetFolder + ".meta");
                Debug.Log("CourseSettings: –ø–∞–ø–∫–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏ –æ—á–∏—â–µ–Ω–∞.");
            }
            catch (Exception ex)
            {
                Debug.LogError("CourseSettings: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É ‚Äî " + ex.Message);
            }
            finally
            {
                AssetDatabase.Refresh();
            }
        }
        else
        {
            Debug.Log("CourseSettings: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    private static void RepaintProjectWindow()
    {
        EditorApplication.RepaintProjectWindow();
        SceneView.RepaintAll();
    }

    private void SaveIfPossible()
    {
        try
        {
            Save(true);
        }
        catch (Exception ex)
        {
            Debug.LogWarning("CourseSettings: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî " + ex.Message);
        }
    }

#if ODIN_INSPECTOR
    [Sirenix.OdinInspector.Button("‚ôª –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", Sirenix.OdinInspector.ButtonSizes.Small)]
    [Sirenix.OdinInspector.GUIColor(0.98f, 0.7f, 0.45f)]
#endif
    public void ResetToDefaults()
    {
        repositoryBaseUrl = "https://raw.githubusercontent.com/NeoXider/AlgoNeoCource/main";
        courseJsonFile = "course.json";
        autoLoadOnStart = true;
        enableDebugLogging = false;
        testMode = false;
        localCourseJsonPath = string.Empty;
        autoConvertGifToMp4 = true;
        ffmpegPath = "Assets/_AlgoNeoCourse/Editor/Utils/ffmpeg.exe";
        gifVideoCacheFolder = "Assets/_AlgoNeoCourse/VideoCache";
        downloadFolderRelative = "Assets/_AlgoNeoCourse/Downloaded";
        lessonsFolderInRepo = "lessons";
        lessonSelections.Clear();
        Save(true);
    }
}

public static class CourseSettingsMenu
{
    [UnityEditor.MenuItem("Tools/AlgoNeoCourse/Settings/Open Course Settings")]
    public static void Open()
    {
        var inst = CourseSettings.instance;
        UnityEditor.Selection.activeObject = inst;
        try
        {
            if (inst != null && inst.autoLoadOnStart && (inst.lessonSelections == null || inst.lessonSelections.Count == 0))
            {
                inst.LoadLessonsList();
            }
        }
        catch (Exception ex)
        {
            Debug.LogWarning($"CourseSettings: –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî {ex.Message}");
        }
    }

    [UnityEditor.MenuItem("Tools/AlgoNeoCourse/Settings/Reset Course Settings")] 
    public static void Reset()
    {
        CourseSettings.EnsureAssetExists();
        CourseSettings.instance.ResetToDefaults();
        UnityEditor.EditorUtility.DisplayDialog("AlgoNeoCourse", "Course Settings —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "OK");
    }
}

[InitializeOnLoad]
public static class CourseSettingsBootstrap
{
    static CourseSettingsBootstrap()
    {
        // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        EditorApplication.delayCall += () =>
        {
            try
            {
                var inst = CourseSettings.instance;
                if (inst != null && inst.autoLoadOnStart && (inst.lessonSelections == null || inst.lessonSelections.Count == 0))
                {
                    inst.LoadLessonsList();
                }
            }
            catch (Exception ex)
            {
                Debug.LogWarning("CourseSettings: –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî " + ex.Message);
            }
        };
    }
}

}
